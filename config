#  ▄▄▄▄· • ▌ ▄ ·. ▪  ▄▄▌   ▄▄· .▄▄ ·   ──────────────────────
#  ▐█ ▀█▪·██ ▐███▪██ ██•  ▐█ ▌▪▐█ ▀.   ╔╦╗╔═╗╔╦╗╔═╗╦╦  ╔═╗╔═╗
#  ▐█▀▀█▄▐█ ▌▐▌▐█·▐█·██ ▪ ██ ▄▄▄▀▀▀█▄   ║║║ ║ ║ ╠╣ ║║  ║╣ ╚═╗
#  ██▄▪▐███ ██▌▐█▌▐█▌▐█▌ ▄▐███▌▐█▄▪▐█  ═╩╝╚═╝ ╩ ╚  ╩╩═╝╚═╝╚═╝
#  ·▀▀▀▀ ▀▀  █▪▀▀▀▀▀▀.▀▀▀ ·▀▀▀  ▀▀▀▀   https://dot.bmilcs.com
#                 ESXI VARIABLES & CONFIG [./esxi.config]

mypath="$(dirname "$(realpath "$0")")"

# core vars
freenashost=$(hostname -s)
esxiuser="root"
esxihost="esxi"
datastores="ESXI NVR"
logdir="$mypath/logs"
mkdir -p "$logdir"

# record keeping:
totalvms=0
totalvmsshutdown=0
totalvmspowereddown=0

# 0=off, 1=on
dryrun=0

# waitretries: how many times script loops while attempting VM power down
waitretries=30

# waitdelay: seconds to sleep during each loop
waitdelay=6

# maxwait: seconds wait before brute forcing power off "product:retries/delay"
maxwait=$((waitretries*waitdelay))

# test run: retry once
if [ $dryrun -ne 0 ]; then
  waitretries=1
fi

#──────────────────────────────────────────────────────────  functions  ───────

_e() {
  echo -e "$*" | tee -a "$logfile"
  }

_t() {
  _e "--------------------------------------------------"
  _e "-[   "$*"   ]-    
  _e "--------------------------------------------------"
  _e "log: $logfile"
  }

_a() {
  _e "\n---[ $1 ]--- $(date +%H.%M.%S--%Y.%m.%d)"
  _e "log: $logfile"
  }

#──────────────────────────────────────────────────────────  functions  ───────

shutdown_guest_vm()
{
  l_try=0

  ssh "${esxiuser}"@"${esxihost}" vim-cmd vmsvc/power.getstate $1 | grep -i "off" > /dev/null 2<&1
  l_status=$?

#  printf "VM [%s] status=[%s]\n" "$1" "${l_status}"

  if [ $l_status -eq 0 ]; then
    echo "Guest VM ID $1 already powered down..."
  else
    while [ $l_try -lt $waitretries ] && [ $l_status -ne 0 ]; do
      l_try=$((l_try+1))
      if [ $dryrun -ne 0 ]; then
        echo "TEST MODE: Would issue shutdown command and wait ${waitdelay} seconds for guest VM ID $1 to shutdown (attempt $l_try of $waitretries)..."
      else
        ssh "${esxiuser}"@"${esxihost}" vim-cmd vmsvc/power.shutdown $1 > /dev/null 2<&1
        echo "Waiting ${waitdelay} seconds for guest VM ID $1 to shutdown (attempt $l_try of $waitretries)..."
        sleep $waitdelay
        ssh "${esxiuser}"@"${esxihost}" vim-cmd vmsvc/power.getstate $1 | grep -i "off" > /dev/null 2<&1
        l_status=$?
#	printf "VM [%s] status=[%s] try=[%s]\n" "$1" "${l_status}" "${l_try}"
      fi
    done
    if [ $l_status -eq 0 ]; then
      echo "Shutdown sucessful on attempt ${l_try}..."
      totalvmsshutdown=$((totalvmsshutdown + 1))
    else
      if [ $dryrun -ne 0 ]; then
        echo "TEST MODE: Unable to gracefully shutdown guest VM ID $1, would force power off and wait ${waitdelay} seconds before checking status."
      else
        echo "Unable to gracefully shutdown guest VM ID $1... forcing power off."
        ssh "${esxiuser}"@"${esxihost}" vim-cmd vmsvc/power.off $1 > /dev/null 2<&1
        sleep $waitdelay
      fi
      ssh "${esxiuser}"@"${esxihost}" vim-cmd vmsvc/power.getstate $1 | grep -i "off" > /dev/null 2<&1
      l_status=$?
#      printf "VM [%s] status=[%s]\n" "$1" "${l_status}"
      if [ $l_status -eq 0 ]; then
        totalvmspowereddown=$((totalvmspowereddown + 1))
      fi
    fi
  fi
}


#shutdown_guest_vm() {
#  
#  l_try=0
#
#  ssh "${esxiuser}"@"${esxihost}" vim-cmd vmsvc/power.getstate $1 | grep -i "off" > /dev/null 2<&1
#  l_status=$?
#
##  printf "VM [%s] status=[%s]\n" "$1" "${l_status}"
#
#  if [ $l_status -eq 0 ]; then
#    _e "Guest VM ID $1 already powered down..."
#  else
#    while [ $l_try -lt $waitretries ] && [ $l_status -ne 0 ]; do
#      l_try=$((l_try+1))
#      ssh "${esxiuser}"@"${esxihost}" vim-cmd vmsvc/power.shutdown $1 > /dev/null 2<&1
#      _e "Waiting ${waitdelay} seconds for guest VM ID $1 to shutdown (attempt $l_try of $waitretries)..."
#      sleep $waitdelay
#      ssh "${esxiuser}"@"${esxihost}" vim-cmd vmsvc/power.getstate $1 | grep -i "off" > /dev/null 2<&1
#      l_status=$?
#    done
#    if [ $l_status -eq 0 ]; then
#      _e "Shutdown sucessful on attempt ${l_try}..."
#      totalvmsshutdown=$((totalvmsshutdown + 1))
#    else
#      if [ $dryrun -ne 0 ]; then
#        _e "TEST MODE: Unable to gracefully shutdown guest VM ID $1, would force power off and wait ${waitdelay} seconds before checking status."
#      else
#        _e "Unable to gracefully shutdown guest VM ID $1... forcing power off."
#        ssh "${esxiuser}"@"${esxihost}" vim-cmd vmsvc/power.off $1 > /dev/null 2<&1
#        sleep $waitdelay
#      fi
#      ssh "${esxiuser}"@"${esxihost}" vim-cmd vmsvc/power.getstate $1 | grep -i "off" > /dev/null 2<&1
#      l_status=$?
##      printf "VM [%s] status=[%s]\n" "$1" "${l_status}"
#      if [ $l_status -eq 0 ]; then
#        totalvmspowereddown=$((totalvmspowereddown + 1))
#      fi
#    fi
#  fi
#
#}

#────────────────────────────────────────────────────────  unnecessary  ───────

# multiple hosts:
# if [ "${freenashost}" = "freenas" ] || \
#    [ "${freenashost}" = "truenas" ] || \
#    [ "${freenashost}" = "naswww" ]; then
#
#   esxihost=esxi
#   esxiuser=root
#   datastores="ESXI NVR"
#   logdir="$mypath/logs/"
#   mkdir -p "$logdir"
#
# else 
# 
#   echo "Undefined system!"
#   exit 1
# 
# fi
